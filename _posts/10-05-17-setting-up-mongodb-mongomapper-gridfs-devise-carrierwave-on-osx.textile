---
layout: post
title: Setting up MongoDB, MongoMapper, GridFS, Devise & Carrierwave on OSX
excerpt: This would have saved me a lot of trouble.
published: true
author: 
  full: Robert Beekman
  twitter: matsimitsu
  description: Robert is a Ruby programmer at <a href="http://80beans.com">80beans</a> and a serious MongoDB fanatic.
---

For a little side project I wanted to experiment with MongoDB and GridFS, but it took me a while to get everything up and running. 
It wasn't really a problem with Mongrel, but as soon as Apache/Passenger came in the picture the problems began.

h3. The gems

Development setup:

{% highlight ruby %}
config.gem 'carrierwave'
config.gem 'devise'
config.gem 'mongo_mapper', :version => '0.7.0'
config.gem 'mongomapper_ext'
config.gem 'will_paginate'
{% endhighlight %}

If you want to use gridFS with Mongo, make sure you use mongomapper 0.7.0, because later versions cause:

bc. mongo/gridfs not found


Test setup:

{% highlight ruby %}
config.gem 'rspec', :lib => 'spec'
config.gem 'rspec-rails', :lib => 'spec/rails'

config.gem 'machinist_mongo', 
	:version => '1.1.0', 
	:lib => 'machinist/mongo_mapper'
	
config.gem 'faker'
config.gem 'steak'
config.gem 'capybara'
{% endhighlight %}


h3. MongoMapper

To use "MongoMapper":http://github.com/jnunemaker/mongomapper add the following to your initializers.

{% highlight ruby %}
# config/initializers/mongo_mapper.rb

# load YAML and connect
database_yaml = YAML::load(File.read(RAILS_ROOT + '/config/database.yml'))
if database_yaml[Rails.env] && database_yaml[Rails.env]['adapter'] == 'MongoDB'
  mongo_database = database_yaml[Rails.env]
  MongoMapper.connection = Mongo::Connection.new(mongo_database['host'], 27017, :pool_size => 5, :timeout => 5)
  MongoMapper.database =  mongo_database['database']
end

if defined?(PhusionPassenger)
   PhusionPassenger.on_event(:starting_worker_process) do |forked|
     MongoMapper.connection.connect_to_master if forked
   end
end
{% endhighlight %}


The PusionPassenger section could be removed if you are not planning to run this on Apache/Passenger Fusion.
If you do plan to run it, make sure this is in your config. It will make sure new spawned Apache cildren still have a MongoDB database connection and prevent you from pulling out all your hair because of this ;)

You can now setup your database.yml config (example:)

{% highlight ruby %}
# config/database.yml

development:
  adapter: MongoDB
  database: mysnaplog_development
  host: localhost
{% endhighlight %}


h3. Devise

Setting up "devise":http://github.com/plataformatec/devise is pretty easy, just use the following snippet

{% highlight ruby %}
# config/initializers/devise.rb

Devise.setup do |config|
  config.mailer_sender = "info@example.com"
  config.orm = :mongo_mapper
end
{% endhighlight %}

And use it in your (user) model:

{% highlight ruby %}
class User < Base
  include MongoMapper::Document
  include MongoMapperExt::Slugizer
  
  devise :registerable, :database_authenticatable, :recoverable, :rememberable, :trackable, :validatable
end
{% endhighlight %}

Since we are on MongDB you can skip the migrations!

h3. Carrierwave

Next up is image uploading, I used "carrierwave":http://github.com/jnicklas/carrierwave

Again some configuration, this time make sure that the "application_#{Rails.env}" is consistent with your database.yml file.

{% highlight ruby %}
# config/initializers/carrierwave.rb

CarrierWave.configure do |config|
  config.grid_fs_database = "application_#{Rails.env}"
  config.grid_fs_host = 'localhost'
  config.grid_fs_access_url = "/gridfs"
  config.storage = :grid_fs
end
{% endhighlight %}


With carrierwave configured we can now implement it in our model.

An example is:

{% highlight ruby %}
class Photo
  require 'carrierwave/orm/mongomapper'
  include MongoMapper::Document
  
  mount_uploader :image, ImageUploader
end
{% endhighlight %}

Note the "mount_uploader". This will tell carrierwave to look for a file called image_uploader in /app/uploaders/image_uploader.rb

That file should contain some of the following:

{% highlight ruby %}
# app/uploaders/image_uploader.rb
class ImageUploader < CarrierWave::Uploader::Base
  include CarrierWave::ImageScience
    
  storage :grid_fs
  
  def store_dir 
    "files/#{model.id}" 
  end 
  
  def extension_white_list
    %w(jpg jpeg gif png)
  end
  
  version :small_thumb do
    process :resize_to_fill => [100,100]
  end
{% endhighlight %}


A couple of things are important here, first the "storage :grid_fs". It will tell carrierwave to store the files in GridFS. 
Next is the "def store_dir" this is used to generate the path to the images.

bc. /gridfs/files/[ID]/[filename].[ext]

Note that the path is prefixed with /gridfs. This is the value we have set in the config of carrierwave.

To serve out the files from rails we are using a "gridfs metal":http://gist.github.com/264077. This will increase the speed of image serving. 


{% highlight ruby %}
# app/metal/grid_fs.rb

# rails metal to be used with carrierwave (gridfs) and MongoMapper

require 'rubygems'
require 'mongo'
require 'mongo/gridfs'

# Allow the metal piece to run in isolation
require(File.dirname(__FILE__) + "/../../config/environment") unless defined?(Rails)

class GridData < Rails::Rack::Metal
  def self.call(env)
    if env["PATH_INFO"] =~ /^\/gridfs\/(.+)$/
      key = $1
      if ::GridFS::GridStore.exist?(MongoMapper.database, key)
        ::GridFS::GridStore.open(MongoMapper.database, key, 'r') do |file|
          [200, {'Content-Type' => file.content_type}, [file.read]]
        end
      else
        [404, {'Content-Type' => 'text/plain'}, ['File not found.']]
      end
    else
      [404, {'Content-Type' => 'text/plain'}, ['File not found.']]
    end
  end
end
{% endhighlight %}


An important thing to note is the regex part: 

bc. if env["PATH_INFO"] =~ /^\/gridfs\/(.+)$/

the gridfs in the regex is the same as in your carrierwave config!

h3. OSX and open files

At some point when I began stresstesting MongoDB by requesting a LOT of files from GridFS mongo would become unresponsive and eventually crash the rails app.
After a deep dive into the logs I found out that MongoDB has a lot of files open. More then the 256 that OSX wil allow by default. 

To fix this use the "following from serverfault":http://serverfault.com/questions/15564/where-are-the-default-ulimits-specified-on-os-x-10-5, it will basically set the open files limit a lot higher for OSX.

To change any of these limits, add a line (you may need to create the file first) to /etc/launchd.conf, the arguments are the same as passed to the launchctl command. For example

bc. sudo echo "limit maxfiles 1024 unlimited" > /etc/launchd.conf

However launchd has already started your login shell, so the simplest way to make these changes take effect is to restart our machine


h3. That's it!

Well that's it! you should now have a working rails stack with MongoMapper, files served from GridFs, authentication from devise and image uploading with carrierwave.
