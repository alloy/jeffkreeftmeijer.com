---
layout: post
title: Don't put your *.gemspec in your Rakefile
excerpt: Why .gemspecs in repositories aren't as stupid as I thought, Jeweler and mg.
---

Yesterday I wrote "&ldquo;.gitignore your *.gemspec&rdquo;":http://jeffkreeftmeijer.com/2010/gitignore-your-gemspec/, an article about how annoying it is to have your .gemspec in your repository.

Just to be clear; I was _not_ talking about completely removing .gemspecs from gems and I was _not_ talking to people writing their .gemspecs themselves. My previous post was about using "Jeweler":http://github.com/technicalpickles/jeweler. When using Jeweler, you put your gem information in your Rakefile and generate your .gemspec when you need it. 

The problem I found with this was people unnecicarily updating the .gemspec file -- it's as easy as running @rake .gemspec@ -- in patches, so I suggested to stop putting .gemspecs in gem repositories.

I think I started a "discussion":http://search.twitter.com/search?q=gemspec&since=2010-04-02&rpp=50.

"@rbates made a comment":http://twitter.com/rbates/status/11487541301 about five minutes after I posted. Here's the deal; "Bundler":http://gembundler.com/ has the ability to install a gem from it's git repository or from a local path by doing this in your Gemfile;

<pre>
# from git
gem 'yourgem', :git => 'git://github.com/user/yourgem.git'

# from a local path
gem 'yourgem', :path => '~/code/yourgem.git'
</pre>

This will fetch the gem from the git repository or local path and _does_ need the .gemspec. This means you won't be able to do this with gems that don't have a .gemspec in their git repository.

"@joshpeek's idea":http://twitter.com/joshpeek/statuses/11489775203 is great when talking about precific gem releases, but installing gems from git or a local path has its charms as well. "@wycats eventually wrote a blogpost":http://yehudakatz.com/2010/04/02/using-gemspecs-as-intended/ about adding .gemspecs to your repositories &ldquo;as intended&rdquo;. Be sure to read it.

I started thinking about other solutions to the initial problem of people updating .gemspecs and wondered; &ldquo;Why are we putting our .gemspecs in our Rakefiles?&rdquo;. Like I said; &ldquo;When using Jeweler, you put your gem information in your Rakefile and generate your .gemspec when you need it.&rdquo;, that seems strange since the Rakefile isn't really a place for gem information. Right? 

I went out and did my research. From the replies to my blogpost, a lot of people were just updating their .gemspecs themselves. I opened one of my .gemspec files and didn't remember why I had to generate all this.

So I went looking for a more minimal way to build and release my gems and found "mg(minimal gem)":http://github.com/sr/mg, which simply builds gems and publishes them to "Rubygems":http://rubygems.org/ using Rake. All you have to do is throw this into your Rakefile;

bc. require "mg"
MG.new("yourgem.gemspec")

Now, you write the .gemspec yourself without having to put anything in your Rakefile and use the Rake tasks mg provides to push, install and package your gem.

This solves the issue of having your gem information in your repository twice -- in your Rakefile and in your .gemspec -- and will probably keep people from updating it unintentionally when patching your gem. After all, it's not as simple as running @rake .gemspec@ anymore.

So, In my previous article I didn't consider installing gems from git or a local path. Right now, you _do_ need your .gemspec in your repository when you want your users to be able to do that. The problem of people touching your .gemspecs can -- to a certain extent -- be solved by not generating your .gemspec, but writing it yourself.

So, what do you think? Thanks a lot to everyone who commented on yesterday's article, it made me think about the whole thing in a completely different way. 
