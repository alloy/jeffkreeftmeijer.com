---
layout: post
title: Warden
excerpt: 
published: false
---

There are a lot of authentication libraries out there, which can do about everything like sending confirmation emails and resetting passwords. I didn't really want that. My plan was to write a little application that could authenticate using "Github":http://github.com credentials. 

So, when a user logs in, the application calls to the "Github API":http://develop.github.com/ to fetch the user's data. Also, the user's token gets saved -- encrypted, of course -- into our database so we don't have to call out every time a user tries to log in.

It didn't take long before I found "Warden":http://github.com/hassox/warden, a &ldquo;General Rack Authentication Framework&rdquo;. It has "a great wiki":http://wiki.github.com/hassox/warden/ (be sure to read it) and a "rails plugin":http://github.com/hassox/rails_warden. Remember: it does _not_ do registration, confirmation and the like. If you want that, use "Devise":http://github.com/plataformatec/devise, which is based Warden.

Warden uses the concept of "strategies":http://wiki.github.com/hassox/warden/strategies. An example of a strategy would be a user logging in with his username and password:

<pre><code>Warden::Strategies.add(:password) do
  
  def valid?
    params[:username] || params[:password]
  end

  def authenticate!
    u = User.authenticate(
      params[:username],
      params[:password]
    )
    
    u.nil? ? fail!("Couldn't log in") : success!(u)
  end
end</code></pre>

"rails_warden_mongoid_example":http://github.com/HP/rails_warden_mongoid_example
