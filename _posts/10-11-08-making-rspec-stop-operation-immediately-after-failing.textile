---
layout: post
title: Making RSpec stop operation immediately after failing
excerpt: Just a heads-up about RSpec's fail_fast configuration option and the --fail-fast command line argument introduced in version 2.1.
published: true
---

Imagine you're running your whole spec suite and the first or second spec fails. You have about two hundred specs to go, but you want to dive in and fix that first failure right away. You'd probably interrupt the run to get the failure details to go fix them, right?

While this works most of the time (you might get some problems interrupting the run when using "Selenium":http://seleniumhq.org/) wouldn't it be awesome if RSpec could automatically stop and output after running into the first failure?

!http://jeffkreeftmeijer.com/images/fusebox.jpg!

Aside from a "three year old thread in the rspec-users group":http://rubyforge.org/pipermail/rspec-users/2007-July/002376.html, I couldn't find a lot of useful data. So I set out to write something myself.

h3. Fail-fast

So I started poking around in the RSpec source and accidentally stumbled on "RSpec's generated documentation on Relish":http://relishapp.com/rspec/rspec-core/, where I found "the hidden @fail_fast@ configuration option":http://relishapp.com/rspec/rspec-core/v/2-0/dir/configuration/fail-fast that got introduced in "rspec-core 2.0.0.rc":http://rubygems.org/gems/rspec-core/versions/2.0.0.rc.

This will cause RSpec to immediately stop running your specs and output the failure details whenever it fails, giving you a nice speed boost when trying to fix some spec fails:

{% highlight ruby %}
# spec/spec_helper.rb

RSpec.configure do |c|
  c.fail_fast = true
end
{% endhighlight %}

h3. Command line support

Since you probably still want to run your whole spec suite without using the @fail_fast@ option from time to time, setting it in @spec/spec_helper.rb@ isn't really a great option. So I added the "@--fail-fast@ command line option":https://github.com/rspec/rspec-core/issues/issue/219 so you can use it from your command line whenever you want:

{% highlight console %}
$ bundle exec rspec spec/ --fail-fast
.F

Failures:
  1) Swinger should set the Capybara driver
     Failure/Error: Capybara.current_driver.should_not == :rack_test

Finished in 0.00479 seconds
2 examples, 1 failure
{% endhighlight %}

The @--fail-fast@ option was only released yesterday as a part of RSpec 2.1, so don't forget to update.
