---
layout: post
title: "Be awesome: write your .gemspec yourself"
excerpt:
published: true
---

"Jeweler":http://github.com/technicalpickles/jeweler is an awesome tool that gives you a generator to quickly set up the main skeleton for building a RubyGem. It has a bunch of rake tasks that make generating, creating, pushing and releasing your gem super easy. If you think you don't know or understand how to build a gem, it's for you.

Half a year ago, the gems I released were all built and maintained using Jeweler, so I happily generated my @.gemspec@ from the information in my @Rakefile@. I published &ldquo;[".gitignore your *.gemspec":http://jeffkreeftmeijer.com/2010/gitignore-your-gemspec]&rdquo;, arguing that the (generated) @.gemspec@ shouldn't be committed into source control.

After getting a lot of responses and reading "@wycats":http://twitter.com/wycats' "response":http://yehudakatz.com/2010/04/02/using-gemspecs-as-intended, I realized that generating the @.gemspec@ file was silly, I completely changed my mind about the whole issue and wrote a follow up titled &ldquo;["Don't put your *.gemspec in your Rakefile":http://localhost:4000/2010/dont-put-your-gemspec-in-your-rakefile/]&rdquo;.

A lot of people are still using (tools like) Jeweler, which is fine. I would like to ask you to take a look at "a simple @.gemspec@":http://github.com/jeffkreeftmeijer/navvy/blob/develop/navvy.gemspec file sometime and ask yourself if this would more difficult to write and maintain than a @Rakefile@ specifying the same thing. What do you think?

h3. The new kid in town

If you read ["@ryanbigg":http://twitter.com/ryanbigg]'s great &ldquo;["Developing a RubyGem using Bundler":http://github.com/radar/guides/blob/master/gem-development.md]&rdquo; guide, you probably know that "Bundler":http://gembundler.com can also create a RubyGem skeleton for you using its @gem@ command:

{% highlight console%}
$ bundle gem my_gem
{% endhighlight %}

It'll give you everything you need -- like the @.gitignore@, @Rakefile@, @Gemfile@ and @*.gemspec@ -- but it puts your gem specification right where it belongs: in your @.gemspec@. Also, it sets up a @Gemfile@ that automatically  gets its dependencies from the @.gemspec@ file, like I explained "before":http://jeffkreeftmeijer.com/2010/bundler-because-your-gems-depend-on-gems-too/.

For a more detailed explanation, check out "Ryan's guide":http://github.com/radar/guides/blob/master/gem-development.md.

h3. Time to move on

While Jeweler and the like were wicked-cool back in the day, I think it's time to move on. Maintaining writing a @.gemspec@ yourself isn't difficult at all and you don't need a tool to generate one for you, look:

{% highlight ruby %}
Gem::Specification.new do |gem|
gem.name    = 'yourgem'
gem.version = '0.0.1'
gem.date    = Date.today.to_s

gem.summary = "an awesome gem"
gem.description = "extended description"

gem.authors  = ['Me Myself', 'One Other']
gem.email    = 'me@example.com'
gem.homepage = 'http://github.com/user/yourgem'

gem.add_dependency('rake')
gem.add_development_dependency('rspec', [">= 2.0.0"])

# ensure the gem is built out of versioned files
gem.files = Dir['Rakefile', '{bin,lib,man,test,spec}//', 'README*', 'LICENSE*'] & `git ls-files -z`.split("\0")

end
{% endhighlight %}

If you like to have a tool to set up a gem skeleton for you, I would suggest using Bundler. It's the cleanest gem builder I've come across so far.

What do you think? Do you prefer treating your @.gemspec@ as a generated file? Do you use a gem builder? Let me know in the comments.
